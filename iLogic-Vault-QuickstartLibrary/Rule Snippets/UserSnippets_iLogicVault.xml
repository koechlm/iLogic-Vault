<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Version>1</Version>
  <Snippets>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>iLogic-Vault Quickstart Header</Name>
      <ToolTip>Reference to library.</ToolTip>
      <Index>2021</Index>
      <Code>
        <![CDATA[AddReference "QuickstartiLogicLibrary.dll"
]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>iLogic Vault - Initialize</Name>
      <ToolTip>Adds the frame to connect and run Vault commands within rule</ToolTip>
      <Index>2002</Index>
      <Code>
        <![CDATA[	'enable iLogicVault commands and validate user's login state
	Dim iLogicVault As New QuickstartiLogicLibrary.QuickstartiLogicLib
	If iLogicVault.LoggedIn = False
		Logger.Error("Not Logged In to Vault! - Login first and repeat executing this rule.")
		Exit Sub
	End If
	
]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Add File and attach to parent</Name>
      <ToolTip>check-in a (newly) file and attach it to the rule's document</ToolTip>
      <Index>4008</Index>
      <Code>
        <![CDATA['create the new file's name
Dim NewFileName = ThisDoc.ChangeExtension(".EXT")

'create the new file
'e.g., save as bitmap file

'upload file as new or incremental file iteration and attach to thisdoc in Vault
Dim mVaultPath As String = iLogicVault.ConvertLocalPathToVaultPath(NewFileName)
Dim mParentVaultFullFileName = iLogicVault.ConvertLocalPathToVaultPath(ThisDoc.Document.FullFileName) + "/" + ThisDoc.FileName(True)
success = iLogicVault.AddFile(NewFileName, mVaultPath, True, mParentVaultFullFileName)
If (success <> True)Then
	Logger.Error("Failed to add/update image file to Vault")
Else
	Logger.Info("Successfully created, uploaded and attached image file.")
End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Vault File by FullFilePath</Name>
      <ToolTip>iLogicVault.GetFileByFullFilePath( "$/Designs/&lt;your file name&gt;")</ToolTip>
      <Index>2003</Index>
      <Code>
        <![CDATA['Download a single file to the local working folder
Dim mVaultFile As String = iLogicVault.GetFileByFullFilePath("$/") 'add ..., True) to enable check-out of downloaded file.
If mVaultFile Is Nothing Then
	Logger.Error("Vault file not found - Please double check that file exists in Vault.")
	ElseIf mVaultFile.Count > 0 Then
		''add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
		
End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Vault File by Search</Name>
      <ToolTip>Search Vault file using 1 to n property/value pairs; returns full local file name in working folder</ToolTip>
      <Index>2004</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Vault Property Name", "Value")
	mSearchParams.Add("Vault Property Name", "Value")
	'...add as many as required to enable a unique search result

	'returns full file name in local working folder (download enforces override, if local file exists)
	mVaultFile = iLogicVault.GetFileBySearchCriteria(mSearchParams, True, False) ', True: combine search criteria by AND; , , False: don't check-out

	If mVaultFile Is Nothing Then
		Logger.Error("Vault file search: File not found - Please double check that file can be found with search criteria applied.")
	Else
		Logger.Info("File " & mVaultFile & " found by search and downloaded to local workspace.")
		'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Vault File Status</Name>
      <ToolTip>Get the Vault file status, to leverage result in pre-checks before downloads etc..</ToolTip>
      <Index>2023</Index>
      <Code>
        <![CDATA['Retrieve the active document's Vault file status as name/value pairs 
	Dim mDocVaultStatus As New Dictionary(Of String, String)
	mDocVaultStatus = iLogicVault.GetVaultFileStatus(ThisDoc.PathAndFileName(True))
	If mDocVaultStatus.Item("ErrorState") = "None"
		'validate that the file is available for check out
		If Not mDocVaultStatus.Item("CheckOutState") <> "NotCheckedOut" Or mDocVaultStatus.Item("LockState") <> "Unlocked" Then
			'continue to check out the file for edits here...
		End If
	Else
		Logger.Error("ErrorState = " + mDocVaultStatus.Item("ErrorState"))
		Logger.Error("CheckOutState = " + mDocVaultStatus.Item("CheckOutState"))
		Logger.Error("ConsumableState = " + mDocVaultStatus.Item("ConsumableState"))
		Logger.Error("LocalEditsState = " + mDocVaultStatus.Item("LocalEditsState"))
		Logger.Error("LockState = " + mDocVaultStatus.Item("LockState"))
		Logger.Error("RevisionState = " + mDocVaultStatus.Item("RevisionState"))
		Logger.Error("VersionState = " + mDocVaultStatus.Item("VersionState"))
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Check Vault File(s) Exist by Search</Name>
      <ToolTip>Search Vault files; returns list of file names found.</ToolTip>
      <Index>2008</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
mSearchParams.Add("Part Number", "001003")
mSearchParams.Add("Title", "Back Side Cover")
'...add as many as required to enable a unique search result

Dim mVaultFiles As List(Of String)
mVaultFiles = iLogicVault.CheckFilesExistBySearchCriteria(mSearchParams, False) 'returns file name(s)
If mVaultFiles Is Nothing Then
	Logger.Error("The file(s) searched was(were) not found. Please double check that the search criteria's relevance.") 
ElseIf mVaultFiles.Count > 0 Then
	Dim mFileList As String
	For Each mFile As String In mVaultFiles
		mFileList += mFile & vbCr
	Next
	Logger.Info("iLogic-Vault file search found: " & mFileList)
	Logger.Info("iLogic-Vault file search finished.")
End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Check Vault File(s) Exist by Search and get properties for each</Name>
      <ToolTip>search for multiple files and get a property name/value map for each file found.</ToolTip>
      <Index>2022</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
	Dim mSearchParams As New Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Vault Property Name", "Value")
	'mSearchParams.Add("Vault Property Name2", "Value")
	'...add as many as required to enable a unique search result

	'Nested dictonary for all files property name value maps.
	Dim mAllFilesProperties As System.Collections.Generic.Dictionary(Of String, Dictionary(Of String, String)) = New Dictionary(Of String, Dictionary(Of String, String))

	Dim mVaultFiles As List(Of String)
	mVaultFiles = iLogicVault.CheckFilesExistBySearchCriteria(mSearchParams, mAllFilesProperties, True)
	If mVaultFiles Is Nothing Then
		Logger.Error("The file(s) searched was(were) not found. Please double check that the search criteria's relevance.")
	ElseIf mVaultFiles.Count > 0 Then
		For Each mFile As String In mVaultFiles
			Logger.Info("iLogic-Vault file search found: " + mFile)
			Dim mPropValPairs As Dictionary(Of String, String) = mAllFilesProperties(mFile)
			For Each item In mPropValPairs
				Logger.Info(mFile + " Property DisplayName=Value: " + item.Key + "=" + item.Value)
			Next
			Logger.Info("iLogic-Vault files search finished.")
		Next
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Update Vault File Properties</Name>
      <ToolTip>Update the file properties of the current file in Vault. The Pre-check validates the prerequisites.</ToolTip>
      <Index>4007</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value; note the value has to be of the expected type like string (text), decimal (numbers), date (date/time), or boolean (true/false)
	Dim mPropNameValueMap As New Dictionary(Of String, Object) 'add UDP.DisplayName, UDP.Value object of matching type
	mPropNameValueMap.Add("Title", "Property Edit at " + Date.Now.ToString)
	Dim mDate As Date = Date.Now
	mPropNameValueMap.Add("Checked Date", mDate)
	Dim mNum As Decimal = 15.60
	mPropNameValueMap.Add("Cost", mNum)
	Dim mBool As Boolean = True
	mPropNameValueMap.Add("MBD", mBool) 'Note - Vault UDP of type Bool must not have "Indeterminate" state; set the default value to True/False

	'we need the file's path in Vault; you can convert the local file path to the corresponding Vault virtual path
	Dim mVaultFileName As String = iLogicVault.ConvertLocalPathToVaultPath(ThisDoc.Path) + "/" + ThisDoc.FileName(True)

	'Retrieve the active document's Vault file status as name/value pairs 
	Dim mDocVaultStatus As New Dictionary(Of String, String)
	mDocVaultStatus = iLogicVault.GetVaultFileStatus(ThisDoc.PathAndFileName(True))
	If mDocVaultStatus.Item("ErrorState") = "None" And Not mDocVaultStatus.Item("CheckOutState") <> "NotCheckedOut" Or mDocVaultStatus.Item("LockState") <> "Unlocked"
		Dim success As Boolean = iLogicVault.UpdateVaultFileProperties(mVaultFileName, mPropNameValueMap)
		If success = False Then
			Logger.Error("Update Properties failed; either the file does not exist at the given full file name/path or is not available for check out.")
		Else
			Logger.Info("Successfully updated properties of file :" & mVaultFileName)
			'refresh the Vault Browser
			oControlDef = ThisApplication.CommandManager.ControlDefinitions.Item("VaultRefresh")
			oControlDef.Execute2(True)
		End If
	Else
		Logger.Error("Could not start to update the properties; check the status info below:")
		Logger.Info("CheckOutState = " + mDocVaultStatus.Item("CheckOutState"))
		Logger.Info("ConsumableState = " + mDocVaultStatus.Item("ConsumableState"))
		Logger.Info("ErrorState = " + mDocVaultStatus.Item("ErrorState"))
		Logger.Info("LocalEditsState = " + mDocVaultStatus.Item("LocalEditsState"))
		Logger.Info("LockState = " + mDocVaultStatus.Item("LockState"))
		Logger.Info("RevisionState = " + mDocVaultStatus.Item("RevisionState"))
		Logger.Info("VersionState = " + mDocVaultStatus.Item("VersionState"))
	End If

]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Check In Active Document</Name>
      <ToolTip>Save and check in active document; Note - requires active Vault connection (Snippet iLogic Vault Connection). Calls UI command and may require user interaction, if dialog suppression is activated for 'Check In' command.</ToolTip>
      <Index>2005</Index>
      <Code>
        <![CDATA[	Try
		ThisDoc.Save
		Dim oControlDef As Inventor.ControlDefinition
		oControlDef = ThisApplication.CommandManager.ControlDefinitions.Item("VaultCheckinTop")
		oControlDef.Execute2(True)
	Catch ex As Exception
		Logger.Error("Check-In failed; likely, the file wasn't checked out.")
	End Try]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Check Out Active Document</Name>
      <ToolTip>check out active document.Note - requires active Vault connection (Snippet iLogic Vault Connection). Calls UI command and may require user interaction, if dialog suppression is activated for 'Check out' command.</ToolTip>
      <Index>2006</Index>
      <Code>
        <![CDATA[ThisDoc.Save
Dim oControlDef As Inventor.ControlDefinition = ThisApplication.CommandManager.ControlDefinitions.Item("VaultCheckoutTop")
oControlDef.Execute2(True) 'synchroneous execution; wait for the commands ending before rule exits]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Undo Check Out Active Document</Name>
      <ToolTip>Undo Check Out of active document. Note - requires active Vault connection (Snippet iLogic Vault Connection). Calls UI command and may require user interaction, if dialog suppression is activated for Undo Check Out command. Pending changes may be skipped; use ThisDoc.Document.Dirty to query its state.</ToolTip>
      <Index>2007</Index>
      <Code>
        <![CDATA[Dim oControlDef As Inventor.ControlDefinition
oControlDef = ThisApplication.CommandManager.ControlDefinitions.Item("VaultUndoCheckoutTop")
oControlDef.Execute2(True) 'synchroneous execution; wait for the commands ending before rule exits]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Vault File Using Vault Numbering</Name>
      <ToolTip>Copy file (given Vault path) applying numbering scheme. Returns full local file name of downloaded file, optionally check-out</ToolTip>
      <Index>2009</Index>
      <Code>
        <![CDATA[	'Set the name of the numbering scheme or use 'Default' to use the pre-set scheme
	Dim mNumSchmName As String = "Default"
	'Optionally collect input values for file the selected numbering scheme; use the order of the fields as configured in the scheme;
	Dim mNumInput As New System.Collections.Generic.List(Of String) 'add UDP.DisplayName, Value Pairs
	
	'returns full file name in local working folder (download enforces override, if local file exists)
	Dim mVaultFile As String = iLogicVault.GetFileCopyBySourceFileNameAndAutoNumber("$/Designs/Inventor Sample Data/Fishing Rod Model/001012.ipt", mNumSchmName, , False) 'optionally add the mNumInput variable; note - the check-out flag is an option also; default = True.
	If mVaultFile Is Nothing Then
		Logger.Error("File copy not created; check that the file can get found first." )
	Else
		Logger.Info("File " & mVaultFile & " created As copy.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Vault File Using Individual New File Name</Name>
      <ToolTip>Copy file (given Vault path) using new name driven by rule. Returns full local file name of downloaded file, optionally check-out</ToolTip>
      <Index>2010</Index>
      <Code>
        <![CDATA['set new file name according your requirements. Use snippet includin auto-numbering if no individual file name applies.
	Dim mNewFileName As String = System.Guid.NewGuid.ToString() 'replace unique ID by your naming configuration, e.g. sequence of f(x) key parameter values
	
	'returns full file name in local working folder (download enforces override, if local file exists)
	'returns "FileNotFound if file does not exist at indicated location
	Dim mVaultFile As String = iLogicVault.GetFileCopyBySourceFileNameAndNewName("$/Designs/Inventor Sample Data/Fishing Rod Model/001012.ipt", mNewFileName, False) 'optionally add the mNumInput variable; note - new file name must not contain an extension! The check-out option is True as default; set to False or remove.
	If mVaultFile Is Nothing Then
		Logger.Error("File copy not created; validate source file can be found and new file name." )
	Else
		Logger.Info("File " & mVaultFile & " created As copy.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Vault File (Searched) Using Vault Numbering</Name>
      <ToolTip>Copy file (found by search) applying numbering scheme. Returns full local file name of downloaded file, optionally check-out</ToolTip>
      <Index>2011</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "001002")
	mSearchParams.Add("Title", "Back Side Cover")
	'...add as many as required to enable a unique search result
	
	'Set the name of the numbering scheme or use 'Default' to use the pre-set scheme
	Dim mNumSchmName As String = "Default"
	'Optionally collect input values for file the selected numbering scheme; use the order of the fields as configured in the scheme;
	Dim mNumInput As New System.Collections.Generic.List(Of String) 'add UDP.DisplayName, Value Pairs
	
	'returns full file name in local working folder (download enforces override, if local file exists)
	Dim mVaultFile As String = iLogicVault.GetFileCopyBySourceFileSearchAndAutoNumber(mSearchParams, mNumSchmName, True, , False) 'the default for optional parameter MatchAllCriteria = false, CheckOut = true, and search in all folders starting from root $/
	If mVaultFile Is Nothing Then
		Logger.Error("File copy not created; verify that the file can be found by the search criteria applied. Also verify your input of numbering sheme name and optional parameters")
	Else
		Logger.Info("File " & mVaultFile & " created As New copy Of search result.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Vault File (Searched) Using Individual New File Name</Name>
      <ToolTip>Copy file (given Vault path) applying numbering scheme. Returns full local file name of downloaded file, optionally check-out</ToolTip>
      <Index>2012</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
		Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
		mSearchParams.Add("Part Number", "001002")
		mSearchParams.Add("Title", "Back Side Cover")
		'...add as many as required to enable a unique search result
	
	'Optionally collect input values for file the selected numbering scheme; use the order of the fields as configured in the scheme;
	Dim mNumInput As New System.Collections.Generic.List(Of String)
	
	'returns full file name in local working folder (download enforces override, if local file exists)
	Dim mNewFileName As String = System.Guid.NewGuid.ToString() 'replace unique ID by your naming configuration, e.g. sequence of f(x) key parameter values
	Dim mVaultFile As String = iLogicVault.GetFileCopyBySourceFileSearchAndNewName(mSearchParams, mNewFileName, True, True)  'the default for optional parameter MatchAllCriteria = false, CheckOut = true 
	If mVaultFile Is Nothing Then
		Logger.Error("File copy not created; check that the source file can get found by the search criteria applied.")
	Else
		Logger.Info("File " & mVaultFile & " created As New copy Of search result.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get New Vault File Number and copy file to it</Name>
      <ToolTip>Create single file number by scheme name (or Default). Copy current local file to it.</ToolTip>
      <Index>2013</Index>
      <Code>
        <![CDATA[	'Set the name of the numbering scheme or use 'Default' to use the pre-set scheme
	Dim mNumSchmName As String = "Default"
	'Optionally collect input values for file the selected numbering scheme; use the order of the fields as configured in the scheme;
	Dim mNumInput As New System.Collections.Generic.List(Of String) 'add UDP.DisplayName, Value Pairs

	'Create single file number by scheme name and optional input parameters; returns new number or error message "GetNumberFailed"
	Dim mFileNumber As String = iLogicVault.GetNewNumber(mNumSchmName) 'optionally add the mNumInput variable adding ...", mNumInput)
	If mFileNumber Is Nothing Then
		Logger.Error("Number generation failed; check name (if not 'Default') or input parameters if required.")
	Else
		Logger.Info("File Number " & mFileNumber & " created and ready for consumption.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mLocalFileCopy, True)
		Dim mFullFileName As String = ThisDoc.Document.FullFileName
        'ThisDoc.Document.SaveAs(mFileNumber, True)
		Dim mLocaFileCopy As String = iLogicVault.CopyLocalFile(mFullFileName, mFileNumber)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Local File</Name>
      <ToolTip>Copy current file to new name; combine snippet 'Get New...Number' or create new file name by rule. The source file's location and extension are captured and apply to the copy. Use Check-In snippet to add the new file to Vault.</ToolTip>
      <Index>2014</Index>
      <Code>
        <![CDATA[	'Retrieve file name to copy
	Dim mFullFileName As String = ThisDoc.Document.FullFileName
	'Call file copy The source file's location and extension are captured and apply to the copy. Returns local path/filename or error statement "LocalFileCopyFailed"
	Dim mLocaFileCopy As String = iLogicVault.mCopyLocalFile(mFullFileName, mFileNumber)]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Multiple Vault Files (Searched)</Name>
      <ToolTip>Search 1 to many files and download all; optionally check-out.</ToolTip>
      <Index>2015</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "00100*")
	'...add as many as required to enable a unique search result
	
	'the list of downloaded files
	Dim mVaultFiles As List(Of String)
	'returns full file names in local working folder (download enforces override, if local file exists)
	'returns null (nothing) if no files return		
	mVaultFiles = iLogicVault.GetFilesBySearchCriteria(mSearchParams, False, False)  'the default for optional parameter MatchAllCriteria = false, CheckOut = true, searching all folders
	'prepare output
	If mVaultFiles.Count = 0 Then
		Logger.Error("The file searched was not found. Please double check that files can be found with search criteria applied.")
	ElseIf mVaultFiles.Count > 0 Then
		Dim mFileList As String
		For Each mFile As String In mVaultFiles
			mFileList += mFile & vbCr
		Next
		Logger.Info("iLogic-Vault file search found: " & mFileList)
		'so the files are there, do what ever you need to do consuming these...
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Thumbnail from Vault by Search</Name>
      <ToolTip>Searches a file to extract the thumbnail as System.Drawing.Image</ToolTip>
      <Index>2017</Index>
      <Code>
        <![CDATA[	'Build one to many name/value pairs of Property/Value as search criteria
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "001002")	'applies to file 001002.ipt
	mSearchParams.Add("Title", "Back Side Cover") 	'applies to file 001002.ipt and to file 001068.iam
	'...add as many as required to enable a unique search result
	
	Dim mImage As System.Drawing.Image = iLogicVault.GetThumbnailImageBySearchCriteria(mSearchParams, True)
	If mImage Is Nothing Then
		Logger.Error("Could not convert thumbnail to image file - Please double check that file exists in Vault including a thumbnail.")
	Else
			''..as of today, the consumption of Image objects is for custom dialogs (dll) only...
			
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Thumbnail from Vault by Full File Path</Name>
      <ToolTip>Extracts source file's thumbnail as System.Drawing.Image object</ToolTip>
      <Index>2018</Index>
      <Code>
        <![CDATA[Dim mImage As System.Drawing.Image = iLogicVault.GetThumbnailImageByFullSourceFilePath("$/Designs/Inventor Sample Data/Fishing Rod Model/001002.ipt", 254, 254)
	If mImage Is Nothing Then
		Logger.Error("Could not convert thumbnail to image file - Please double check that file exists in Vault including a thumbnail.")
	Else
			''..as of today, the consumption of Image objects is for custom dialogs (dll) only...
			
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Thumbnail from Vault by Search as Image file</Name>
      <ToolTip>Searches for a source file to extract the thumbnail of and downloads it as JPG file</ToolTip>
      <Index>2019</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "001002")	'applies to file 001002.ipt
	mSearchParams.Add("Title", "Back Side Cover") 	'applies to file 001002.ipt and to file 001068.iam
	'...add as many as required to enable a unique search result
	
	Dim mImageFile As String = iLogicVault.GetThumbnailFileBySearchCriteria(mSearchParams, True)
	If mImageFile Is Nothing Then
		Logger.Error("Could not convert thumbnail to image file - Please double check that file exists in Vault including a thumbnail.")
	Else
			''add next action using the downloaded file here...
			
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Thumbnail from Vault by Full File Path as Image file</Name>
      <ToolTip>Extracts thumbnail from source file and downloads it as JPG file</ToolTip>
      <Index>2020</Index>
      <Code>
        <![CDATA[	Dim mImageFile As String = iLogicVault.GetThumbnailFileByFullSourceFilePath("$/Designs/Inventor Sample Data/Fishing Rod Model/001002.ipt", 254, 254)
	If mImageFile Is Nothing Then
		Logger.Error("Could not convert thumbnail to image file - Please double check that file exists in Vault including a thumbnail.")
	Else
			''add next action using the downloaded file here...
			
	End If]]>
      </Code>
    </CodeSnippet>
	</Snippets>
</CodeSnippets>